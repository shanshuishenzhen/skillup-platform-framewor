name: 持续集成 (CI)

# 触发条件
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'

# 环境变量
env:
  NODE_VERSION: '22.x'
  CACHE_KEY_PREFIX: 'skillup-platform'

# 作业定义
jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行 ESLint
      run: npm run lint
      
    - name: 检查 TypeScript 类型
      run: npx tsc --noEmit

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: ['20.x', '22.x']
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行单元测试
      run: npm run test:unit:coverage
      
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '22.x'
      with:
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-tests-coverage
        
    - name: 保存测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/

  # 集成测试
  integration-tests:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: skillup_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 设置测试环境变量
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/skillup_test" >> $GITHUB_ENV
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key" >> $GITHUB_ENV
        
    - name: 运行集成测试
      run: npm run test:integration:coverage
      
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: integration-tests
        name: integration-tests-coverage
        
    - name: 保存测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          coverage/
          test-results/

  # 端到端测试
  e2e-tests:
    name: 端到端测试
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: skillup_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 设置测试环境变量
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/skillup_test" >> $GITHUB_ENV
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key" >> $GITHUB_ENV
        echo "NEXTAUTH_SECRET=test-nextauth-secret" >> $GITHUB_ENV
        echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
        
    - name: 构建应用
      run: npm run build
      
    - name: 运行端到端测试
      run: npm run test:e2e:coverage
      
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: e2e-tests
        name: e2e-tests-coverage
        
    - name: 保存测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          coverage/
          test-results/
          screenshots/

  # 数据库测试
  database-tests:
    name: 数据库测试
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: skillup_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 设置测试环境变量
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/skillup_test" >> $GITHUB_ENV
        echo "NODE_ENV=test" >> $GITHUB_ENV
        
    - name: 运行数据库测试
      run: npm run test:database:coverage
      
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: database-tests
        name: database-tests-coverage
        
    - name: 保存测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: database-test-results
        path: |
          coverage/
          test-results/

  # 性能测试
  performance-tests:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行性能测试
      run: npm run test:performance
      
    - name: 保存性能测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance-results/

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行 npm audit
      run: npm audit --audit-level moderate
      
    - name: 运行 Snyk 安全扫描
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # 构建测试
  build-test:
    name: 构建测试
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建应用
      run: npm run build
      
    - name: 检查构建产物
      run: |
        ls -la .next/
        du -sh .next/
        
    - name: 保存构建产物
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: .next/
        retention-days: 7

  # 测试报告汇总
  test-summary:
    name: 测试报告汇总
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, database-tests]
    if: always()
    
    steps:
    - name: 下载所有测试结果
      uses: actions/download-artifact@v4
      
    - name: 生成测试报告
      run: |
        echo "# 测试报告汇总" > test-summary.md
        echo "" >> test-summary.md
        echo "## 测试结果" >> test-summary.md
        echo "- 单元测试: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- 集成测试: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- 端到端测试: ${{ needs.e2e-tests.result }}" >> test-summary.md
        echo "- 数据库测试: ${{ needs.database-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "## 覆盖率报告" >> test-summary.md
        echo "详细覆盖率报告请查看 Codecov。" >> test-summary.md
        
    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md

  # 部署到预览环境（仅限主分支）
  deploy-preview:
    name: 部署到预览环境
    runs-on: ubuntu-latest
    needs: [build-test, test-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到 Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}