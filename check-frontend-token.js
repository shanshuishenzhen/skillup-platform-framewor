/**
 * ÂâçÁ´ØTokenÁä∂ÊÄÅÊ£ÄÊü•ËÑöÊú¨
 * Áî®‰∫éÊ£ÄÊü•ÊµèËßàÂô®localStorage‰∏≠ÁöÑËÆ§ËØÅ‰ø°ÊÅØ
 */

const puppeteer = require('puppeteer');

/**
 * Ê£ÄÊü•ÂâçÁ´ØlocalStorage‰∏≠ÁöÑËÆ§ËØÅ‰ø°ÊÅØ
 */
async function checkFrontendTokens() {
  console.log('üîç ÂºÄÂßãÊ£ÄÊü•ÂâçÁ´ØTokenÁä∂ÊÄÅ...');
  
  let browser;
  try {
    // ÂêØÂä®ÊµèËßàÂô®
    browser = await puppeteer.launch({
      headless: false, // ÊòæÁ§∫ÊµèËßàÂô®Á™óÂè£
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // ËÆøÈóÆÁÆ°ÁêÜÂëòÁôªÂΩïÈ°µÈù¢
    console.log('üì± ËÆøÈóÆÁÆ°ÁêÜÂëòÁôªÂΩïÈ°µÈù¢...');
    await page.goto('http://localhost:3000/login', { waitUntil: 'networkidle0' });

    // Á≠âÂæÖÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Ê£ÄÊü•ÁôªÂΩïÂâçÁöÑlocalStorage
    console.log('\n=== ÁôªÂΩïÂâçlocalStorageÁä∂ÊÄÅ ===');
    const beforeLoginStorage = await page.evaluate(() => {
      const storage = {};
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        storage[key] = localStorage.getItem(key);
      }
      return storage;
    });
    console.log('ÁôªÂΩïÂâçlocalStorage:', beforeLoginStorage);

    // ÊâßË°åÁôªÂΩï
    console.log('\nüîê ÊâßË°åÁÆ°ÁêÜÂëòÁôªÂΩï...');
    
    // Á≠âÂæÖÊâãÊú∫Âè∑ËæìÂÖ•Ê°ÜÂá∫Áé∞Âπ∂ËæìÂÖ•
    await page.waitForSelector('input#phone', { timeout: 10000 });
    await page.type('input#phone', '13823738278');
    console.log('‚úì ËæìÂÖ•ÊâãÊú∫Âè∑');

    // Á≠âÂæÖÂØÜÁ†ÅËæìÂÖ•Ê°ÜÂá∫Áé∞Âπ∂ËæìÂÖ•
    await page.waitForSelector('input#password', { timeout: 10000 });
    await page.type('input#password', '123456');
    console.log('‚úì ËæìÂÖ•ÂØÜÁ†Å');
    
    // ÁÇπÂáªÁôªÂΩïÊåâÈíÆ
    await page.click('button[type="submit"]');
    
    // Á≠âÂæÖÁôªÂΩïÂÆåÊàê
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Ê£ÄÊü•ÁôªÂΩïÂêéÁöÑlocalStorage
    console.log('\n=== ÁôªÂΩïÂêélocalStorageÁä∂ÊÄÅ ===');
    const afterLogin = await page.evaluate(() => {
      const storage = {};
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        const value = localStorage.getItem(key);
        storage[key] = value;
      }
      return storage;
    });
    console.log('ÁôªÂΩïÂêélocalStorage:', JSON.stringify(afterLogin, null, 2));
    
    // Ëß£Êûêtoken
    if (afterLogin.token) {
      console.log('\n=== TokenËß£Êûê ===');
      const tokenParts = afterLogin.token.split('.');
      if (tokenParts.length === 3) {
        try {
          const payload = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString());
          console.log('Token Payload:', JSON.stringify(payload, null, 2));
          
          // Ê£ÄÊü•tokenÊòØÂê¶ËøáÊúü
          const now = Math.floor(Date.now() / 1000);
          if (payload.exp < now) {
            console.log('‚ö†Ô∏è TokenÂ∑≤ËøáÊúü');
          } else {
            console.log('‚úÖ TokenÊúâÊïà');
          }
        } catch (error) {
          console.log('‚ùå TokenËß£ÊûêÂ§±Ë¥•:', error.message);
        }
      } else {
        console.log('‚ùå TokenÊ†ºÂºè‰∏çÊ≠£Á°Æ');
      }
    } else {
      console.log('‚ùå Êú™ÊâæÂà∞token');
    }
    
    // Ê£ÄÊü•ÂΩìÂâçÈ°µÈù¢URL
    const currentUrl = page.url();
    console.log('\nüìç ÂΩìÂâçÈ°µÈù¢URL:', currentUrl);
    
    // Â∞ùËØïËÆøÈóÆÁÆ°ÁêÜÂëòÈ°µÈù¢
    console.log('\nüè† Â∞ùËØïËÆøÈóÆÁÆ°ÁêÜÂëò‰∏ªÈ°µ...');
    await page.goto('http://localhost:3000/admin', { waitUntil: 'networkidle0' });
    
    // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Ê£ÄÊü•È°µÈù¢ÂÜÖÂÆπ
    const pageContent = await page.evaluate(() => {
      return {
        title: document.title,
        url: window.location.href,
        hasErrorMessage: document.querySelector('.text-red-500') !== null,
        errorText: document.querySelector('.text-red-500')?.textContent || null,
        hasPermissionError: document.body.textContent.includes('ÊùÉÈôê‰∏çË∂≥'),
        bodyText: document.body.textContent.substring(0, 500)
      };
    });
    
    console.log('\n=== ÁÆ°ÁêÜÂëòÈ°µÈù¢ËÆøÈóÆÁªìÊûú ===');
    console.log('È°µÈù¢Ê†áÈ¢ò:', pageContent.title);
    console.log('È°µÈù¢URL:', pageContent.url);
    console.log('ÊòØÂê¶ÊúâÈîôËØØ‰ø°ÊÅØ:', pageContent.hasErrorMessage);
    console.log('ÈîôËØØÊñáÊú¨:', pageContent.errorText);
    console.log('ÊòØÂê¶ÊúâÊùÉÈôêÈîôËØØ:', pageContent.hasPermissionError);
    console.log('È°µÈù¢ÂÜÖÂÆπÈ¢ÑËßà:', pageContent.bodyText);
    
    // Âú®ÊµèËßàÂô®ÊéßÂà∂Âè∞‰∏≠ÊµãËØïÊùÉÈôêÊ£ÄÊü•API
    console.log('\n=== ÊµèËßàÂô®‰∏≠ÊµãËØïÊùÉÈôêÊ£ÄÊü•API ===');
    const apiTestResult = await page.evaluate(async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          return { error: 'Êú™ÊâæÂà∞token' };
        }
        
        const response = await fetch('/api/admin/check-permission', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        const data = await response.json();
        return {
          status: response.status,
          ok: response.ok,
          data: data
        };
      } catch (error) {
        return { error: error.message };
      }
    });
    
    console.log('APIÊµãËØïÁªìÊûú:', JSON.stringify(apiTestResult, null, 2));
    
    // ‰øùÊåÅÊµèËßàÂô®ÊâìÂºÄ‰∏ÄÊÆµÊó∂Èó¥‰æõÊâãÂä®Ê£ÄÊü•
    console.log('\n‚è∞ ÊµèËßàÂô®Â∞Ü‰øùÊåÅÊâìÂºÄ30Áßí‰æõÊâãÂä®Ê£ÄÊü•...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// ËøêË°åÊ£ÄÊü•
if (require.main === module) {
  checkFrontendTokens().catch(error => {
    console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error);
    process.exit(1);
  });
}

module.exports = { checkFrontendTokens };