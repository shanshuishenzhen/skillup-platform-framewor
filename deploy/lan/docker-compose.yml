version: '3.8'

services:
  # SkillUp Platform 主应用
  skillup-app:
    build:
      context: ../..
      dockerfile: deploy/lan/Dockerfile
    container_name: skillup-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_APP_URL=http://192.168.1.100:3000
      - NEXT_PUBLIC_SUPABASE_URL=http://supabase:54321
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - REDIS_URL=redis://redis:6379
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - ALLOWED_ORIGINS=http://192.168.1.100:3000,http://192.168.1.*
      - MAX_FILE_SIZE_MB=10
      - UPLOAD_DIR=/app/uploads
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      - supabase
      - redis
    networks:
      - skillup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Supabase 本地实例
  supabase:
    image: supabase/supabase:latest
    container_name: supabase-local
    ports:
      - "54321:54321"  # API Gateway
      - "54322:54322"  # Database
      - "54323:54323"  # Auth
      - "54324:54324"  # Storage
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-skillup123}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DASHBOARD_USERNAME=admin
      - DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD:-admin123}
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase-config:/docker-entrypoint-initdb.d
    networks:
      - skillup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: skillup-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-skillup123}
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - skillup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: skillup-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - skillup-app
    networks:
      - skillup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 (可选)
  monitoring:
    image: prom/prometheus:latest
    container_name: skillup-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - skillup-network
    restart: unless-stopped

volumes:
  supabase_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  skillup-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# 环境变量说明:
# 创建 .env 文件并设置以下变量:
# SUPABASE_SERVICE_ROLE_KEY=your_service_role_key_here
# NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key_here
# ENCRYPTION_KEY=your_32_character_encryption_key_here
# API_SECRET_KEY=your_api_secret_key_for_jwt_tokens
# SESSION_SECRET=your_session_secret_key
# POSTGRES_PASSWORD=your_postgres_password
# JWT_SECRET=your-super-secret-jwt-token-with-at-least-32-characters-long
# DASHBOARD_PASSWORD=your_dashboard_password
# REDIS_PASSWORD=your_redis_password